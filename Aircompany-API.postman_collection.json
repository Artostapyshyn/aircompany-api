{
	"info": {
		"_postman_id": "b7e69f85-214b-4424-8365-09254ecf44b0",
		"name": "Aircompany-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25325175"
	},
	"item": [
		{
			"name": "Flight",
			"item": [
				{
					"name": "Get completed flights with exceeded estimated time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the correct Content-Type header\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is an array\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  pm.expect(responseData).to.have.lengthOf(0);",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/flights/completed/exceeded-estimated-time",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"flights",
								"completed",
								"exceeded-estimated-time"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get flights by company and status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate that the flightStatus is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  ",
									"  responseData.forEach(function(flight) {",
									"    pm.expect(flight.flightStatus).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Departure country and destination country are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function (flight) {",
									"    pm.expect(flight.departureCountry).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Departure country should not be empty\");",
									"    pm.expect(flight.destinationCountry).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Destination country should not be empty\");",
									"  });",
									"});",
									"",
									"pm.test(\"Distance and estimated flight time must be non-negative numbers\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"  ",
									"  responseData.forEach(function(flight) {",
									"    pm.expect(flight.distance).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(flight.estimatedFlightTime).to.be.a('number').and.to.be.at.least(0);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/flights/company/Ryanair/status/DELAYED",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"flights",
								"company",
								"Ryanair",
								"status",
								"DELAYED"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Flight status is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.flightStatus).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Air company ID is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.airCompanyId).to.exist;",
									"    pm.expect(responseData.airCompanyId).to.be.a('number');",
									"    pm.expect(responseData.airCompanyId).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Airplane ID is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.airplaneId).to.exist;",
									"  pm.expect(responseData.airplaneId).to.be.a('number');",
									"  pm.expect(responseData.airplaneId).to.satisfy((id) => id >= 0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"flightStatus\": \"ACTIVE\",\r\n  \"departureCountry\": \"Ukraine\",\r\n  \"destinationCountry\": \"USA\",\r\n  \"distance\": 5000.0,\r\n  \"estimatedFlightTime\": 600,\r\n  \"startedAt\": \"2024-03-27T12:00:00\",\r\n  \"endedAt\": \"2024-03-27T18:00:00\",\r\n  \"delayStartedAt\": \"2024-03-27T13:00:00\",\r\n  \"airCompanyId\": 2,\r\n  \"airplaneId\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/flights",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"flights"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get active flights started more than 24 hours ago",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the expected content type of application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is an array\", function () {",
									"  pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"",
									"  pm.test(\"Response body is empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.empty;",
									"  });",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/flights/active/started-more-than-24-hours-ago",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"flights",
								"active",
								"started-more-than-24-hours-ago"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Flight Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Flight status is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.flightStatus).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"airCompanyId is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.airCompanyId).to.be.a('number');",
									"  pm.expect(responseData.airCompanyId).to.be.at.least(0, \"Value should be non-negative\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/flights/2/status?newStatus=DELAYED",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"flights",
								"2",
								"status"
							],
							"query": [
								{
									"key": "newStatus",
									"value": "DELAYED"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AirCompany",
			"item": [
				{
					"name": "Get all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'id' field is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.id).to.be.a('number');",
									"        pm.expect(item.id).to.be.at.least(0, \"Value should be non-negative\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'name' field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function (aircompany) {",
									"    pm.expect(aircompany.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/aircompanies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"aircompanies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.include.all.keys('id', 'name', 'companyType', 'foundedAt', 'airplaneIds');",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.be.a('number');",
									"  pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"companyType is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.companyType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/aircompanies/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"aircompanies",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Air Company",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/aircompanies/10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"aircompanies",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Air Company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.companyType).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.foundedAt).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.airplaneIds).to.exist.and.to.be.null;",
									"});",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"FoundedAt is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.foundedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"AirplaneIds is an array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.airplaneIds).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"companyType\":\"Domestic\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/aircompanies/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"aircompanies",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.companyType).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.foundedAt).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.airplaneIds).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"CompanyType is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.companyType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"CompanyType should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"FoundedAt is a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.foundedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"SkyLine\",\r\n    \"companyType\": \"Domestic\",\r\n    \"foundedAt\": \"2018-07-09\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/aircompanies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"aircompanies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Airplane",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'id' is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'name' is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"The factorySerialNumber is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.factorySerialNumber).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Boeing 737\",\r\n    \"factorySerialNumber\": \"B737-001\",\r\n    \"airCompanyId\": 1,\r\n    \"numberOfFlights\": 100,\r\n    \"flightDistance\": 12000.5,\r\n    \"fuelCapacity\": 5000.0,\r\n    \"type\": \"Passenger\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/airplanes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"airplanes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reassign airplane to company",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/airplanes/1/reassign/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"airplanes",
								"1",
								"reassign",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign airplane to company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.include.all.keys(",
									"    'id',",
									"    'name',",
									"    'factorySerialNumber',",
									"    'airCompanyId',",
									"    'numberOfFlights',",
									"    'flightDistance',",
									"    'fuelCapacity',",
									"    'type',",
									"    'createdAt'",
									"  );",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"factorySerialNumber is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.factorySerialNumber).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"airCompanyId is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.airCompanyId).to.be.a('number');",
									"  pm.expect(responseData.airCompanyId).to.be.at.least(0, \"airCompanyId should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/airplanes/1/assign/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"airplanes",
								"1",
								"assign",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}